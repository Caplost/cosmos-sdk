// Code generated by MockGen. DO NOT EDIT.
// Source: state_machine.go
//
// Generated by this command:
//
//	mockgen -source=state_machine.go -package=internal -destination=runner.mock.go
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
	isgomock struct{}
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// CheckHeightSync mocks base method.
func (m *MockRunner) CheckHeightSync(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckHeightSync", ctx)
}

// CheckHeightSync indicates an expected call of CheckHeightSync.
func (mr *MockRunnerMockRecorder) CheckHeightSync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHeightSync", reflect.TypeOf((*MockRunner)(nil).CheckHeightSync), ctx)
}

// ReadManualUpgradeBatchSync mocks base method.
func (m *MockRunner) ReadManualUpgradeBatchSync(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadManualUpgradeBatchSync", ctx)
}

// ReadManualUpgradeBatchSync indicates an expected call of ReadManualUpgradeBatchSync.
func (mr *MockRunnerMockRecorder) ReadManualUpgradeBatchSync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadManualUpgradeBatchSync", reflect.TypeOf((*MockRunner)(nil).ReadManualUpgradeBatchSync), ctx)
}

// ReadUpgradeInfoJsonSync mocks base method.
func (m *MockRunner) ReadUpgradeInfoJsonSync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUpgradeInfoJsonSync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadUpgradeInfoJsonSync indicates an expected call of ReadUpgradeInfoJsonSync.
func (mr *MockRunnerMockRecorder) ReadUpgradeInfoJsonSync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUpgradeInfoJsonSync", reflect.TypeOf((*MockRunner)(nil).ReadUpgradeInfoJsonSync), ctx)
}

// StartProcess mocks base method.
func (m *MockRunner) StartProcess(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProcess", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartProcess indicates an expected call of StartProcess.
func (mr *MockRunnerMockRecorder) StartProcess(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcess", reflect.TypeOf((*MockRunner)(nil).StartProcess), ctx)
}

// StartWatchers mocks base method.
func (m *MockRunner) StartWatchers(ctx context.Context, watchers ...Watcher) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range watchers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartWatchers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWatchers indicates an expected call of StartWatchers.
func (mr *MockRunnerMockRecorder) StartWatchers(ctx any, watchers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, watchers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWatchers", reflect.TypeOf((*MockRunner)(nil).StartWatchers), varargs...)
}

// StopProcess mocks base method.
func (m *MockRunner) StopProcess(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopProcess", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopProcess indicates an expected call of StopProcess.
func (mr *MockRunnerMockRecorder) StopProcess(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProcess", reflect.TypeOf((*MockRunner)(nil).StopProcess), ctx)
}

// StopWatchers mocks base method.
func (m *MockRunner) StopWatchers(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWatchers", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopWatchers indicates an expected call of StopWatchers.
func (mr *MockRunnerMockRecorder) StopWatchers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWatchers", reflect.TypeOf((*MockRunner)(nil).StopWatchers), ctx)
}
