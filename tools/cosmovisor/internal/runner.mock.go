// Code generated by MockGen. DO NOT EDIT.
// Source: state_machine.go
//
// Generated by this command:
//
//	mockgen -source=state_machine.go -package=internal -destination=runner.mock.go
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
	isgomock struct{}
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// CheckActualHeight mocks base method.
func (m *MockRunner) CheckActualHeight(ctx context.Context, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckActualHeight", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckActualHeight indicates an expected call of CheckActualHeight.
func (mr *MockRunnerMockRecorder) CheckActualHeight(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActualHeight", reflect.TypeOf((*MockRunner)(nil).CheckActualHeight), varargs...)
}

// CheckForManualUpgradeBatch mocks base method.
func (m *MockRunner) CheckForManualUpgradeBatch(ctx context.Context, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckForManualUpgradeBatch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckForManualUpgradeBatch indicates an expected call of CheckForManualUpgradeBatch.
func (mr *MockRunnerMockRecorder) CheckForManualUpgradeBatch(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForManualUpgradeBatch", reflect.TypeOf((*MockRunner)(nil).CheckForManualUpgradeBatch), varargs...)
}

// CheckForUpgradeInfoJSON mocks base method.
func (m *MockRunner) CheckForUpgradeInfoJSON(ctx context.Context, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckForUpgradeInfoJSON", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckForUpgradeInfoJSON indicates an expected call of CheckForUpgradeInfoJSON.
func (mr *MockRunnerMockRecorder) CheckForUpgradeInfoJSON(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForUpgradeInfoJSON", reflect.TypeOf((*MockRunner)(nil).CheckForUpgradeInfoJSON), varargs...)
}

// CheckLastKnownHeight mocks base method.
func (m *MockRunner) CheckLastKnownHeight(ctx context.Context, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckLastKnownHeight", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckLastKnownHeight indicates an expected call of CheckLastKnownHeight.
func (mr *MockRunnerMockRecorder) CheckLastKnownHeight(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLastKnownHeight", reflect.TypeOf((*MockRunner)(nil).CheckLastKnownHeight), varargs...)
}

// Start mocks base method.
func (m *MockRunner) Start(ctx context.Context, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRunnerMockRecorder) Start(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRunner)(nil).Start), varargs...)
}

// StartWithHaltHeight mocks base method.
func (m *MockRunner) StartWithHaltHeight(ctx context.Context, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartWithHaltHeight", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWithHaltHeight indicates an expected call of StartWithHaltHeight.
func (mr *MockRunnerMockRecorder) StartWithHaltHeight(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWithHaltHeight", reflect.TypeOf((*MockRunner)(nil).StartWithHaltHeight), varargs...)
}

// Stop mocks base method.
func (m *MockRunner) Stop(ctx context.Context, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRunnerMockRecorder) Stop(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRunner)(nil).Stop), varargs...)
}
